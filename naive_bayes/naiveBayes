import glob
from sklearn import naive_bayes
import os
from sklearn.feature_extraction.text import CountVectorizer
def train():
    train_file_list = glob.glob("../naive_bayes/*course_train/*")
    #print train_file_list
    vectorizer = CountVectorizer(input='filename', stop_words='english',encoding='latin1')
    X_train = vectorizer.fit_transform(train_file_list)
    Y_train = []
    for file_path in train_file_list:
        Y_train.append(not ('non_course' in file_path))

    logreg = naive_bayes.BernoulliNB()
    logreg.fit(X_train, Y_train)
    return logreg,vectorizer

def test(logreg,vectorizer):
    test_file_list = glob.glob("../naive_bayes/*course_test/*")
    #vectorizer = CountVectorizer(input='filename', stop_words='english',encoding="latin1")
    sum=0
    sumFiles=test_file_list.__len__()
    # for i in test_file_list:
    #     print i+'\n'
    for index_file in test_file_list:
        if index_file != '.' and index_file != '..':
            X_test = vectorizer.transform([index_file])
            Y_test=not ('non_course' in index_file)
            if logreg.predict(X_test) != Y_test:
                sum=sum+1

    print "error rate: " + str(sum*1.0/sumFiles)

if __name__=="__main__":
    #logreg=train()
    logreg,vectorizer=train()
    test(logreg,vectorizer)
